/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   get_next_line.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mguerga <mguerga@42lausanne.ch>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/07/03 19:26:29 by mguerga           #+#    #+#             */
/*   Updated: 2023/07/04 16:13:07 by mguerga          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>

int	terminates(char *str)
{
	int	i;

	i = 0;
	while (i <= BUFFER_SIZE && str[i] != '\0')
	{
		if (str[i] == '\n')
			return (i);
		i++;
	}
	return (-1);
}

int	ft_strlen(char *str)
{
	int	i;

	i = 0;
	while (str[i] != '\0')
		i++;
	return (i);
}

char	*ft_strjoin(char *s1, char *s2, char *s3)
{
	int		i;
	int		e;
	char	*ret;

	ret = calloc(sizeof(*s1), (ft_strlen(s1) + ft_strlen(s2) + 1));
	i = 0;
	e = 0;
	while (s1[i] != '\0')
		ret[e++] = s1[i++];
	i = 0;
	while (s2[i] != '\0')
		ret[e++] = s2[i++];
	ret[e] = '\0';
	if (s3 != NULL)
		free(s3);
	return (ret);
}

char	*ft_strjoin_n_replace(char *s1, char *s2)
{
	int		i;
	int		e;
	char	*ret;

	ret = calloc(sizeof(*s1), (ft_strlen(s1) + ft_strlen(s2) + 1));
	i = 0;
	e = 0;
	while (s1[i] != '\0')
		ret[e++] = s1[i++];
	i = 0;
	while (s2[i] != '\0')
		ret[e++] = s2[i++];
	ret[e] = '\0';
	free (s1);
	return (ret);
}

char	*main_loop(int fd, char *line, char **stat_line, int red)
{
	int		i;
	char	*buf;

	i = 0;
	buf = calloc(sizeof(*buf), BUFFER_SIZE + 1);
	red = read(fd, buf, BUFFER_SIZE);
	buf[BUFFER_SIZE] = '\0';
	if (*stat_line != NULL)
		free(*stat_line);
	while (red > 0)
	{
		i = terminates(buf);
		if (i > -1)
		{
			*stat_line = ft_strjoin("", &buf[i + 1], NULL);
			buf[i + 1] = '\0';
			line = ft_strjoin_n_replace(line, buf);
			free(buf);
			return (line);
		}
		else
			line = ft_strjoin_n_replace(line, buf);
		red = read(fd, buf, BUFFER_SIZE);
		if (red == 0)
		{
			free(buf);
			return (line);
		}
	}
	free (line);
	free (buf);
	return (NULL);
}

char	*get_next_line(int fd)
{
	int			red;
	int			i;
	char		*line;
	static char	*stat_line;

	i = 0;
	red = 0;
	line = malloc(1);
	line[0] = '\0';
	if (stat_line != NULL)
	{
		i = terminates(stat_line);
		if (i != -1)
		{
			free(line);
			line = ft_strjoin("\0", stat_line, NULL);
			line[i + 1] = '\0';
			stat_line = ft_strjoin("", &stat_line[i + 1], stat_line);
			return (line);
		}
		else
		{
			free(line);
			line = ft_strjoin("", stat_line, NULL);
			free(stat_line);
			stat_line = NULL;
		}
	}
	return (main_loop(fd, line, &stat_line, red));
}

int	ft_putstr(char *line)
{
	int	i;

	i = 0;
	while (line[i] != '\0')
	{
		write(1, &line[i], 1);
		i++;
	}
	return (0);
}

char	*replace_line(char *old_line, int fd)
{
	char	*ret;

	free(old_line);
	ret = get_next_line(fd);
	return (ret);
}

int	main(void)
{
	int		fd;
	char	*line;

	fd = open("get_next_line.c", O_RDONLY);
	line = get_next_line(fd);
	while (line != NULL)
	{
		ft_putstr(line);
		line = replace_line(line, fd);
	}
	return (0);
}
