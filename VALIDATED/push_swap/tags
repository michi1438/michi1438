!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!Make	I,makefile	/makefiles/
!_TAG_KIND_DESCRIPTION!Make	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!Make	t,target	/targets/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	0.0	/current.age/
!_TAG_PARSER_VERSION!Make	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/michael/michi1438/VALIDATED/push_swap/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	/a130f268/
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!Make!makefile	included	/included/
!_TAG_ROLE_DESCRIPTION!Make!makefile	optional	/optionally included/
$(NAME)	Makefile	/^$(NAME): $(OBJ)$/;"	t
$(NAME)	src/Makefile	/^$(NAME): $(OBJS) $/;"	t
$(NAMEB)	Makefile	/^$(NAMEB): $(OBJB)$/;"	t
AR	src/Makefile	/^AR = ar rc$/;"	m
BUFFER_SIZE	src/ft_gnl/get_next_line_bonus.h	/^#  define BUFFER_SIZE /;"	d
CC	Makefile	/^CC = gcc$/;"	m
CC	src/Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -Werror -Wextra -Wall #-g3 -fsanitize=leak$/;"	m
CFLAGS	src/Makefile	/^CFLAGS = -Werror -Wall -Wextra$/;"	m
GET_NEXT_LINE_BONUS_H	src/ft_gnl/get_next_line_bonus.h	/^# define GET_NEXT_LINE_BONUS_H$/;"	d
LIBFT_H	src/ft_main/libft.h	/^# define LIBFT_H$/;"	d
NAME	Makefile	/^NAME = push_swap$/;"	m
NAME	src/Makefile	/^NAME = libft.a $/;"	m
NAMEB	Makefile	/^NAMEB = checker$/;"	m
OBJ	Makefile	/^OBJ = $(SRC:.c=.o)$/;"	m
OBJB	Makefile	/^OBJB = $(SRCB:.c=.o)$/;"	m
OBJS	src/Makefile	/^OBJS = $(SOURCES:c=o)$/;"	m
PATH_TO	src/Makefile	/^PATH_TO = src\/$/;"	m
PRINTF_H	src/ft_printf/printf.h	/^# define PRINTF_H$/;"	d
PUSH_SWAP_H	push_swap.h	/^# define PUSH_SWAP_H$/;"	d
SOURCES	src/Makefile	/^SOURCES = $(addprefix ft_main\/, $(SRC_MAIN)) \\$/;"	m
SRC	Makefile	/^SRC = main.c err_handling.c parsing.c cleaner.c checking_n_atoi.c \\$/;"	m
SRCB	Makefile	/^SRCB = checker.c \\$/;"	m
SRC_GNL	src/Makefile	/^SRC_GNL = get_next_line_utils_bonus.c get_next_line_bonus.c$/;"	m
SRC_H	src/src.h	/^# define SRC_H$/;"	d
SRC_MAIN	src/Makefile	/^SRC_MAIN = ft_bzero.c ft_isalpha.c ft_isdigit.c ft_isalnum.c ft_isascii.c ft_isprint.c \\$/;"	m
SRC_PRINTF	src/Makefile	/^SRC_PRINTF = optionctrl.c optionctrl_supl.c print_toconv.c print_toconv_supl.c \\$/;"	m
_clean_dbl	cleaner.c	/^void	_clean_dbl(char **ptr)$/;"	f	typeref:typename:void
_pars_mult	parsing.c	/^int	_pars_mult(int ac, char **av, t_stacks *stacks)$/;"	f	typeref:typename:int
_pars_mult_check	checker.c	/^int	_pars_mult_check(int ac, char **av, t_stacks *stacks)$/;"	f	typeref:typename:int
_pars_one	parsing.c	/^int	_pars_one(char *av, t_stacks *stacks)$/;"	f	typeref:typename:int
_pars_one_check	checker.c	/^int	_pars_one_check(char *av, t_stacks *stacks)$/;"	f	typeref:typename:int
_trimer	checking_n_atoi.c	/^char	*_trimer(char *val, int *neg)$/;"	f	typeref:typename:char *
abs	pre_sort_utils.c	/^int	abs(int val)$/;"	f	typeref:typename:int
all	Makefile	/^all: $(NAME) $(NAMEB) $/;"	t
all	src/Makefile	/^all: $(NAME) $/;"	t
apply_width	src/ft_printf/optionctrl.c	/^void	apply_width(int size, int width, t_toggler *flg)$/;"	f	typeref:typename:void
appwidspe	src/ft_printf/optionctrl.c	/^void	appwidspe(int size, int width, t_toggler *flg, t_conv *cvut)$/;"	f	typeref:typename:void
argintprt	src/ft_printf/print_toconv.c	/^void	argintprt(t_toggler *flg, t_conv *cvut, int toconv)$/;"	f	typeref:typename:void
atoi_n_check	checking_n_atoi.c	/^int	atoi_n_check(char *val)$/;"	f	typeref:typename:int
backward_check_content	list_enum.c	/^void	backward_check_content(t_stacks **stacks)$/;"	f	typeref:typename:void
big_alg	big_alg.c	/^void	big_alg(t_stacks *stacks)$/;"	f	typeref:typename:void
btrim	src/ft_main/ft_strtrim.c	/^int	btrim(char const *s1, char const *set)$/;"	f	typeref:typename:int
buf	src/ft_gnl/get_next_line_bonus.h	/^	char	*buf;$/;"	m	struct:sct1	typeref:typename:char *
calc	src/ft_main/ft_atoi.c	/^int	calc(int i, const char *nptr)$/;"	f	typeref:typename:int
calc_small_index	sorting.c	/^int	calc_small_index(t_stack *node)$/;"	f	typeref:typename:int
check_content	list_enum.c	/^void	check_content(t_stacks *stacks)$/;"	f	typeref:typename:void
clean	Makefile	/^clean:$/;"	t
clean	src/Makefile	/^clean:$/;"	t
cleaner	src/ft_printf/printfer.c	/^void	cleaner(t_conv *cvut)$/;"	f	typeref:typename:void
cleanlst	cleaner.c	/^void	cleanlst(t_stacks *stacks)$/;"	f	typeref:typename:void
clear_fing	src/ft_main/ft_split.c	/^int	clear_fing(char **ptrptr, int j)$/;"	f	typeref:typename:int
cluster_pre_sort	big_alg.c	/^void	cluster_pre_sort(t_stacks *stacks)$/;"	f	typeref:typename:void
content	push_swap.h	/^	int		*content;$/;"	m	struct:s_stack	typeref:typename:int *
content	src/ft_main/libft.h	/^	void			*content;$/;"	m	struct:s_list	typeref:typename:void *
conv_flags	src/ft_printf/printf.h	/^	char	*conv_flags;$/;"	m	struct:sct	typeref:typename:char *
copy	src/ft_main/ft_strtrim.c	/^char	*copy(char *ptr, char const *s1, int bt, int ft)$/;"	f	typeref:typename:char *
counter	src/ft_main/ft_split.c	/^int	counter(char const *s, char c)$/;"	f	typeref:typename:int
create_cvut	src/ft_printf/printfer_supl.c	/^void	*create_cvut(const char *str, int i, t_conv *cvut)$/;"	f	typeref:typename:void *
cvut_lenpoint	src/ft_printf/print_toconv.c	/^void	cvut_lenpoint(t_toggler *flg, t_conv *cvut, int toconv)$/;"	f	typeref:typename:void
cvutlenstr	src/ft_printf/print_toconv_suplll.c	/^void	cvutlenstr(t_conv *cvut, const char *toconv)$/;"	f	typeref:typename:void
dealwithplneg	src/ft_printf/print_toconv_supllll.c	/^void	dealwithplneg(t_toggler *flg, t_conv *cvut, int toconv)$/;"	f	typeref:typename:void
dealwithplus	src/ft_printf/print_toconv_supllll.c	/^void	dealwithplus(t_toggler *flg, t_conv *cvut, int toconv)$/;"	f	typeref:typename:void
dealwithpoints	src/ft_printf/print_toconv_suplll.c	/^void	dealwithpoints(t_toggler *flg, int toconv, t_conv *cvut)$/;"	f	typeref:typename:void
dealwithpospoints	src/ft_printf/print_toconv_suplll.c	/^void	dealwithpospoints(t_toggler *flg, t_conv *cvut, int toconv)$/;"	f	typeref:typename:void
del_first_node	list_manip_sort.c	/^void	del_first_node(t_stack **node)$/;"	f	typeref:typename:void
del_last_node	list_manip_sort.c	/^void	del_last_node(t_stack **node)$/;"	f	typeref:typename:void
distance	pre_sort_utils.c	/^int	distance(int i, int size)$/;"	f	typeref:typename:int
empty_stack_a	radix_sort.c	/^void	empty_stack_a(t_stacks *stacks)$/;"	f	typeref:typename:void
empty_stack_b	pre_sort_utils.c	/^void	empty_stack_b(t_stacks *stacks)$/;"	f	typeref:typename:void
fclean	Makefile	/^fclean: $/;"	t
fclean	src/Makefile	/^fclean: clean$/;"	t
find_cheapest	big_alg.c	/^int	find_cheapest(t_stacks *stacks)$/;"	f	typeref:typename:int
find_largest_b	pre_sort_utils.c	/^int	find_largest_b(t_stacks *stacks)$/;"	f	typeref:typename:int
find_smallest	pre_sort_utils.c	/^int	find_smallest(t_stacks *stacks)$/;"	f	typeref:typename:int
flag_parser	src/ft_printf/printparser.c	/^char	*flag_parser(const char *str, int i)$/;"	f	typeref:typename:char *
flglying	src/ft_printf/optionctrl.c	/^void	*flglying(char *flag, t_toggler *flg)$/;"	f	typeref:typename:void *
free_n_next	cleaner.c	/^t_stack	*free_n_next(t_stack *node)$/;"	f	typeref:typename:t_stack *
freeandreplace	src/ft_gnl/get_next_line_utils_bonus.c	/^char	*freeandreplace(char *oldstr, char *stradd, int ind)$/;"	f	typeref:typename:char *
ft_atoi	src/ft_main/ft_atoi.c	/^int	ft_atoi(const char *nptr)$/;"	f	typeref:typename:int
ft_bzero	src/ft_main/ft_bzero.c	/^void	ft_bzero(void *s, int n)$/;"	f	typeref:typename:void
ft_calloc	src/ft_main/ft_calloc.c	/^void	*ft_calloc(size_t nmemb, size_t size)$/;"	f	typeref:typename:void *
ft_err	err_handling.c	/^void	ft_err(void)$/;"	f	typeref:typename:void
ft_isalnum	src/ft_main/ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f	typeref:typename:int
ft_isalpha	src/ft_main/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f	typeref:typename:int
ft_isascii	src/ft_main/ft_isascii.c	/^int	ft_isascii(int c)$/;"	f	typeref:typename:int
ft_isdigit	src/ft_main/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f	typeref:typename:int
ft_isprint	src/ft_main/ft_isprint.c	/^int	ft_isprint(int c)$/;"	f	typeref:typename:int
ft_itoa	src/ft_main/ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f	typeref:typename:char *
ft_lstadd_back	src/ft_main/ft_lstadd_back.c	/^void	ft_lstadd_back(t_list **lst, t_list *new)$/;"	f	typeref:typename:void
ft_lstadd_front	src/ft_main/ft_lstadd_front.c	/^void	ft_lstadd_front(t_list **lst, t_list *new)$/;"	f	typeref:typename:void
ft_lstclear	src/ft_main/ft_lstclear.c	/^void	ft_lstclear(t_list **lst, void (*del)(void *))$/;"	f	typeref:typename:void
ft_lstdelone	src/ft_main/ft_lstdelone.c	/^void	ft_lstdelone(t_list *lst, void (*del)(void*))$/;"	f	typeref:typename:void
ft_lstiter	src/ft_main/ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f)(void *))$/;"	f	typeref:typename:void
ft_lstlast	src/ft_main/ft_lstlast.c	/^t_list	*ft_lstlast(t_list *lst)$/;"	f	typeref:typename:t_list *
ft_lstmap	src/ft_main/ft_lstmap.c	/^t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))$/;"	f	typeref:typename:t_list *
ft_lstnew	src/ft_main/ft_lstnew.c	/^t_list	*ft_lstnew(void *content)$/;"	f	typeref:typename:t_list *
ft_lstsize	src/ft_main/ft_lstsize.c	/^int	ft_lstsize(t_list *lst)$/;"	f	typeref:typename:int
ft_memchr	src/ft_main/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f	typeref:typename:void *
ft_memcmp	src/ft_main/ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f	typeref:typename:int
ft_memcpy	src/ft_main/ft_memcpy.c	/^void	*ft_memcpy(void *dst, const void *src, size_t n)$/;"	f	typeref:typename:void *
ft_memmove	src/ft_main/ft_memmove.c	/^void	*ft_memmove(void *dst, const void *src, size_t len)$/;"	f	typeref:typename:void *
ft_memset	src/ft_main/ft_memset.c	/^void	*ft_memset(void *b, int c, size_t len)$/;"	f	typeref:typename:void *
ft_printf	src/ft_printf/printfer.c	/^int	ft_printf(const char *str, ...)$/;"	f	typeref:typename:int
ft_putchar_fd	src/ft_main/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f	typeref:typename:void
ft_putendl_fd	src/ft_main/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f	typeref:typename:void
ft_puthex_fd	src/ft_printf/optionctrl_supl.c	/^void	ft_puthex_fd(unsigned long ln, int fd, t_conv *cvut)$/;"	f	typeref:typename:void
ft_putnbr_fd	src/ft_main/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f	typeref:typename:void
ft_putstr_fd	src/ft_main/ft_putstr_fd.c	/^void	ft_putstr_fd(char *s, int fd)$/;"	f	typeref:typename:void
ft_putuns_fd	src/ft_printf/optionctrl_supl.c	/^void	ft_putuns_fd(unsigned int ln, int fd, t_conv *cvut)$/;"	f	typeref:typename:void
ft_split	src/ft_main/ft_split.c	/^char	**ft_split(char const *s, char c)$/;"	f	typeref:typename:char **
ft_strchr	src/ft_main/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f	typeref:typename:char *
ft_strdup	src/ft_main/ft_strdup.c	/^char	*ft_strdup(const char *s)$/;"	f	typeref:typename:char *
ft_striteri	src/ft_main/ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char*))$/;"	f	typeref:typename:void
ft_strjoin	src/ft_gnl/get_next_line_utils_bonus.c	/^char	*ft_strjoin(const char *s1, const char *s2)$/;"	f	typeref:typename:char *
ft_strjoin	src/ft_main/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f	typeref:typename:char *
ft_strlcat	src/ft_main/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t size)$/;"	f	typeref:typename:size_t
ft_strlcpy	src/ft_main/ft_strlcpy.c	/^size_t	ft_strlcpy(char *dst, const char *src, size_t size)$/;"	f	typeref:typename:size_t
ft_strlen	src/ft_main/ft_strlen.c	/^size_t	ft_strlen(const char *s)$/;"	f	typeref:typename:size_t
ft_strmapi	src/ft_main/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f	typeref:typename:char *
ft_strncmp	src/ft_main/ft_strncmp.c	/^int	ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f	typeref:typename:int
ft_strnstr	src/ft_main/ft_strnstr.c	/^char	*ft_strnstr(const char *big, const char *little, size_t len)$/;"	f	typeref:typename:char *
ft_strrchr	src/ft_main/ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f	typeref:typename:char *
ft_strtrim	src/ft_main/ft_strtrim.c	/^char	*ft_strtrim(char const *s1, char const *set)$/;"	f	typeref:typename:char *
ft_substr	src/ft_main/ft_substr.c	/^char	*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f	typeref:typename:char *
ft_tolower	src/ft_main/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f	typeref:typename:int
ft_toupper	src/ft_main/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f	typeref:typename:int
ftrim	src/ft_main/ft_strtrim.c	/^int	ftrim(char const *s1, char const *set)$/;"	f	typeref:typename:int
get_next_line	src/ft_gnl/get_next_line_bonus.c	/^char	*get_next_line(int fd)$/;"	f	typeref:typename:char *
give_index	big_bigger_utils.c	/^void	give_index(int i, int min, t_stacks *stacks)$/;"	f	typeref:typename:void
give_index_b	big_bigger_utils.c	/^void	give_index_b(int i, int max, t_stacks *stacks)$/;"	f	typeref:typename:void
hash	src/ft_printf/printf.h	/^	int	hash;$/;"	m	struct:sctone	typeref:typename:int
hexprintshrinker	src/ft_printf/print_toconv_supl.c	/^void	hexprintshrinker(t_toggler *flg, unsigned int toconv, t_conv *cvut)$/;"	f	typeref:typename:void
hexshrinker	src/ft_printf/print_toconv_supll.c	/^void	hexshrinker(unsigned int toconv, t_conv *cvut, t_toggler *flg)$/;"	f	typeref:typename:void
ifbufhasreturn	src/ft_gnl/get_next_line_bonus.c	/^char	*ifbufhasreturn(t_strs *strings, char **statline, int i, int *red)$/;"	f	typeref:typename:char *
ifstatret	src/ft_gnl/get_next_line_bonus.c	/^char	*ifstatret(t_strs *strings, char **statline, int i)$/;"	f	typeref:typename:char *
implfing	src/ft_main/ft_split.c	/^void	*implfing(char const *s, char c, char **ptrptr, int *i)$/;"	f	typeref:typename:void *
index	push_swap.h	/^	int		*index;$/;"	m	struct:s_stack	typeref:typename:int *
indexify	big_alg_utils.c	/^int	indexify(t_stacks *stacks)$/;"	f	typeref:typename:int
is_ordered	big_alg_utils.c	/^int	is_ordered(t_stacks	*stacks)$/;"	f	typeref:typename:int
len	src/ft_printf/printf.h	/^	int		len;$/;"	m	struct:sct	typeref:typename:int
lengthhex	src/ft_printf/print_toconv_supl.c	/^int	lengthhex(unsigned int toconv, t_conv *cvut, t_toggler *flg)$/;"	f	typeref:typename:int
lengthint	src/ft_printf/print_toconv_supl.c	/^int	lengthint(int toconv, t_conv *cvut, t_toggler *flg)$/;"	f	typeref:typename:int
lengthprehex	src/ft_printf/print_toconv_supl.c	/^int	lengthprehex(unsigned int toconv, t_conv *cvut, t_toggler *flg)$/;"	f	typeref:typename:int
lengthpreint	src/ft_printf/print_toconv_supl.c	/^int	lengthpreint(int toconv, t_conv *cvut)$/;"	f	typeref:typename:int
line	src/ft_gnl/get_next_line_bonus.h	/^	char	*line;$/;"	m	struct:sct1	typeref:typename:char *
lstadd_back	list_manip_init.c	/^void	lstadd_back(t_stack **stack, t_stack *new)$/;"	f	typeref:typename:void
lstadd_front	list_manip_sort.c	/^void	lstadd_front(t_stack **stack, t_stack *new)$/;"	f	typeref:typename:void
lstlast	list_manip_init.c	/^t_stack	*lstlast(t_stack *stack, int *value)$/;"	f	typeref:typename:t_stack *
lstnew	list_manip_init.c	/^t_stack	*lstnew(int *value)$/;"	f	typeref:typename:t_stack *
lstsize_n_check	list_manip_init.c	/^int	lstsize_n_check(t_stack *lst, int *val)$/;"	f	typeref:typename:int
main	checker.c	/^int	main(int ac, char **av)$/;"	f	typeref:typename:int
main	main.c	/^int	main(int ac, char **av)$/;"	f	typeref:typename:int
mainwhile	src/ft_gnl/get_next_line_bonus.c	/^char	*mainwhile(int fd, t_strs *strings, char **statline, int *red)$/;"	f	typeref:typename:char *
neg	src/ft_printf/printf.h	/^	int	neg;$/;"	m	struct:sctone	typeref:typename:int
next	push_swap.h	/^	void	*next;$/;"	m	struct:s_stack	typeref:typename:void *
next	src/ft_main/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list *
no_dupl	src/ft_printf/printparser.c	/^int	no_dupl(char *retstr, char ch, int e, const char *str)$/;"	f	typeref:typename:int
numbertypes	src/ft_printf/printfer_supl.c	/^int	numbertypes(t_conv *cvut, long long toconv, int i)$/;"	f	typeref:typename:int
numlen	src/ft_printf/optionctrl_supl.c	/^int	numlen(unsigned long ln, t_conv *cvut)$/;"	f	typeref:typename:int
numlenneg	src/ft_printf/optionctrl.c	/^int	numlenneg(long long ln, t_conv *cvut)$/;"	f	typeref:typename:int
p_malloc	err_handling.c	/^void	*p_malloc(size_t size)$/;"	f	typeref:typename:void *
p_malloc_clean	err_handling.c	/^void	*p_malloc_clean(size_t size, t_stacks *stacks)$/;"	f	typeref:typename:void *
pa	op_swap_push.c	/^void	pa(t_stacks *stacks)$/;"	f	typeref:typename:void
pa_c	op_swap_push_check.c	/^void	pa_c(t_stacks *stacks)$/;"	f	typeref:typename:void
pars	parsing.c	/^int	pars(int ac, char **av)$/;"	f	typeref:typename:int
pars_checker	checker.c	/^int	pars_checker(int ac, char **av)$/;"	f	typeref:typename:int
parselong	src/ft_main/ft_itoa.c	/^int	parselong(long ln, int *neg)$/;"	f	typeref:typename:int
pb	op_swap_push.c	/^void	pb(t_stacks *stacks)$/;"	f	typeref:typename:void
pb_c	op_swap_push_check.c	/^void	pb_c(t_stacks *stacks)$/;"	f	typeref:typename:void
placeva	src/ft_printf/printfer.c	/^int	placeva(int *ret, t_conv *cvut, int i, va_list perc)$/;"	f	typeref:typename:int
plus	src/ft_printf/printf.h	/^	int	plus;$/;"	m	struct:sctone	typeref:typename:int
point	src/ft_printf/printf.h	/^	int	point;$/;"	m	struct:sctone	typeref:typename:int
precis	src/ft_printf/printf.h	/^	int		precis;$/;"	m	struct:sct	typeref:typename:int
precision_counter	src/ft_printf/printparser.c	/^int	precision_counter(const char *str, int i)$/;"	f	typeref:typename:int
prev	push_swap.h	/^	void	*prev;$/;"	m	struct:s_stack	typeref:typename:void *
printargcha	src/ft_printf/print_toconv_supll.c	/^int	printargcha(int toconv, t_conv *cvut)$/;"	f	typeref:typename:int
printarghex	src/ft_printf/print_toconv_supll.c	/^int	printarghex(unsigned int toconv, t_conv *cvut)$/;"	f	typeref:typename:int
printargptr	src/ft_printf/print_toconv_supll.c	/^int	printargptr(unsigned long toconv, t_conv *cvut)$/;"	f	typeref:typename:int
proxylengthcnt	src/ft_printf/printparser_supl.c	/^int	proxylengthcnt(const char *str, int i)$/;"	f	typeref:typename:int
prx_len	src/ft_printf/printf.h	/^	int		prx_len;$/;"	m	struct:sct	typeref:typename:int
ptrtypes	src/ft_printf/printfer.c	/^int	ptrtypes(t_conv *cvut, void *toconv, int i)$/;"	f	typeref:typename:int
push_index	big_alg.c	/^void	push_index(int ind, int size, t_stacks *stacks)$/;"	f	typeref:typename:void
push_index_radix	radix_sort.c	/^void	push_index_radix(int ind, int size, t_stacks *stacks)$/;"	f	typeref:typename:void
ra	op_rotate.c	/^void	ra(t_stacks *stacks)$/;"	f	typeref:typename:void
ra_c	op_rotate_check.c	/^void	ra_c(t_stacks *stacks)$/;"	f	typeref:typename:void
radix_sort	radix_sort.c	/^void	radix_sort(t_stacks *stacks)$/;"	f	typeref:typename:void
rb	op_rotate.c	/^void	rb(t_stacks *stacks)$/;"	f	typeref:typename:void
rb_c	op_rotate_check.c	/^void	rb_c(t_stacks *stacks)$/;"	f	typeref:typename:void
rb_sb_ss	big_alg_utils.c	/^void	rb_sb_ss(t_stacks *stacks, int index_max)$/;"	f	typeref:typename:void
re	Makefile	/^re: fclean$/;"	t
re	src/Makefile	/^re: fclean all$/;"	t
readforterm	src/ft_gnl/get_next_line_utils_bonus.c	/^int	readforterm(char *buf, int toggle)$/;"	f	typeref:typename:int
reset_for_nextbit	radix_sort.c	/^void	reset_for_nextbit(t_stacks *stacks, int i)$/;"	f	typeref:typename:void
rot_shrinker	big_bigger_utils.c	/^void	rot_shrinker(t_stacks *stacks)$/;"	f	typeref:typename:void
rot_to_ind_a	big_bigger_utils.c	/^void	rot_to_ind_a(t_stacks *stacks, int ind, int i)$/;"	f	typeref:typename:void
rr	op_both_stacks.c	/^void	rr(t_stacks *stacks)$/;"	f	typeref:typename:void
rr__rb	op_both_stacks_supl.c	/^void	rr__rb(t_stacks *stacks)$/;"	f	typeref:typename:void
rr_c	op_both_stacks_check.c	/^void	rr_c(t_stacks *stacks)$/;"	f	typeref:typename:void
rra	op_rotate.c	/^void	rra(t_stacks *stacks)$/;"	f	typeref:typename:void
rra_c	op_rotate_check.c	/^void	rra_c(t_stacks *stacks)$/;"	f	typeref:typename:void
rra_sa_rrr	big_alg.c	/^void	rra_sa_rrr(t_stacks *stacks, int i, int size)$/;"	f	typeref:typename:void
rrb	op_rotate.c	/^void	rrb(t_stacks *stacks)$/;"	f	typeref:typename:void
rrb_c	op_rotate_check.c	/^void	rrb_c(t_stacks *stacks)$/;"	f	typeref:typename:void
rrb_sb	big_alg_utils.c	/^void	rrb_sb(t_stacks *stacks)$/;"	f	typeref:typename:void
rrr	op_both_stacks.c	/^void	rrr(t_stacks *stacks)$/;"	f	typeref:typename:void
rrr__rrb	op_both_stacks.c	/^void	rrr__rrb(t_stacks *stacks)$/;"	f	typeref:typename:void
rrr_c	op_both_stacks_check.c	/^void	rrr_c(t_stacks *stacks)$/;"	f	typeref:typename:void
s_list	src/ft_main/libft.h	/^typedef struct s_list$/;"	s
s_stack	push_swap.h	/^typedef struct s_stack{$/;"	s
s_stacks	push_swap.h	/^typedef struct s_stacks{$/;"	s
sa	op_swap_push.c	/^void	sa(t_stacks *stacks)$/;"	f	typeref:typename:void
sa_c	op_swap_push_check.c	/^void	sa_c(t_stacks *stacks)$/;"	f	typeref:typename:void
sb	op_swap_push.c	/^void	sb(t_stacks *stacks)$/;"	f	typeref:typename:void
sb_c	op_swap_push_check.c	/^void	sb_c(t_stacks *stacks)$/;"	f	typeref:typename:void
sct	src/ft_printf/printf.h	/^typedef struct sct {$/;"	s
sct1	src/ft_gnl/get_next_line_bonus.h	/^typedef struct sct1 {$/;"	s
sctone	src/ft_printf/printf.h	/^typedef struct sctone {$/;"	s
set_flags	src/ft_printf/optionctrl.c	/^void	*set_flags(t_toggler *flg)$/;"	f	typeref:typename:void *
simple_cvutlen	src/ft_printf/print_toconv.c	/^void	simple_cvutlen(t_toggler *flg, t_conv *cvut, int toconv)$/;"	f	typeref:typename:void
sort_restof_a	sorting.c	/^void	sort_restof_a(t_stacks *stacks)$/;"	f	typeref:typename:void
sorting	big_bigger_utils.c	/^void	sorting(t_stacks *stacks)$/;"	f	typeref:typename:void
sorting_inner	big_alg_utils.c	/^void	sorting_inner(t_stacks *stacks, int size, int index_max)$/;"	f	typeref:typename:void
space	src/ft_printf/printf.h	/^	int	space;$/;"	m	struct:sctone	typeref:typename:int
spcplunopoint	src/ft_printf/print_toconv.c	/^void	spcplunopoint(t_toggler *flg, int toconv, t_conv *cvut)$/;"	f	typeref:typename:void
ss	op_both_stacks.c	/^void	ss(t_stacks *stacks)$/;"	f	typeref:typename:void
ss__sb	op_both_stacks.c	/^void	ss__sb(t_stacks *stacks)$/;"	f	typeref:typename:void
ss__sb_c	op_both_stacks_check.c	/^void	ss__sb_c(t_stacks *stacks)$/;"	f	typeref:typename:void
ss_c	op_both_stacks_check.c	/^void	ss_c(t_stacks *stacks)$/;"	f	typeref:typename:void
stack_a	push_swap.h	/^	t_stack	**stack_a;$/;"	m	struct:s_stacks	typeref:typename:t_stack **
stack_b	push_swap.h	/^	t_stack	**stack_b;$/;"	m	struct:s_stacks	typeref:typename:t_stack **
start_sort	sorting.c	/^void	start_sort(t_stacks *stacks)$/;"	f	typeref:typename:void
stat_after_read	src/ft_gnl/get_next_line_bonus.c	/^char	*stat_after_read(char **statline, t_strs *strings, int red, int i)$/;"	f	typeref:typename:char *
strcvutneg	src/ft_printf/print_toconv_suplll.c	/^void	strcvutneg(t_toggler *flg, t_conv *cvut, const char *toconv)$/;"	f	typeref:typename:void
strshrinker	src/ft_printf/print_toconv_suplll.c	/^void	strshrinker(t_toggler *flg, t_conv *cvut, const char *toconv)$/;"	f	typeref:typename:void
t_conv	src/ft_printf/printf.h	/^}	t_conv;$/;"	t	typeref:struct:sct
t_list	src/ft_main/libft.h	/^}	t_list;$/;"	t	typeref:struct:s_list
t_stack	push_swap.h	/^}		t_stack;$/;"	t	typeref:struct:s_stack
t_stacks	push_swap.h	/^}		t_stacks;$/;"	t	typeref:struct:s_stacks
t_strs	src/ft_gnl/get_next_line_bonus.h	/^}	t_strs;$/;"	t	typeref:struct:sct1
t_toggler	src/ft_printf/printf.h	/^}	t_toggler;	$/;"	t	typeref:struct:sctone
take_input	checker.c	/^void	take_input(t_stacks *stacks)$/;"	f	typeref:typename:void
take_input_ops	checker_ops.c	/^void	take_input_ops(char *buf, t_stacks *stacks)$/;"	f	typeref:typename:void
testperc	src/ft_printf/printfer.c	/^int	testperc(t_conv *cvut)$/;"	f	typeref:typename:int
testprintargint	src/ft_printf/print_toconv_supllll.c	/^int	testprintargint(int toconv, t_conv *cvut)$/;"	f	typeref:typename:int
testprintargstr	src/ft_printf/print_toconv_supll.c	/^int	testprintargstr(const char *toconv, t_conv *cvut)$/;"	f	typeref:typename:int
testprintarguns	src/ft_printf/print_toconv.c	/^int	testprintarguns(unsigned int toconv, t_conv *cvut)$/;"	f	typeref:typename:int
three_node_sort	sorting.c	/^void	three_node_sort(t_stacks *stacks, int cont1, int cont2, int cont3)$/;"	f	typeref:typename:void
trans	src/ft_main/ft_itoa.c	/^char	*trans(int i, long buf, int *neg)$/;"	f	typeref:typename:char *
trimatoi	src/ft_main/ft_atoi.c	/^int	trimatoi(const char *nptr, int *neg)$/;"	f	typeref:typename:int
type	src/ft_printf/printf.h	/^	char	type;$/;"	m	struct:sct	typeref:typename:char
type_reader	src/ft_printf/printparser.c	/^char	type_reader(const char *str, int i)$/;"	f	typeref:typename:char
under_six	sorting.c	/^void	under_six(t_stacks *stacks)$/;"	f	typeref:typename:void
wid	src/ft_printf/printf.h	/^	int		wid;$/;"	m	struct:sct	typeref:typename:int
width_counter	src/ft_printf/printparser.c	/^int	width_counter(const char *str, int i)$/;"	f	typeref:typename:int
zero	src/ft_printf/printf.h	/^	int	zero;$/;"	m	struct:sctone	typeref:typename:int
