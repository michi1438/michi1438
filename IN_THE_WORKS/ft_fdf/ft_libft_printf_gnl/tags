!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!Make	I,makefile	/makefiles/
!_TAG_KIND_DESCRIPTION!Make	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!Make	t,target	/targets/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	0.0	/current.age/
!_TAG_PARSER_VERSION!Make	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/michael/michi1438/PUSH_SWAP/ft_libft_printf_gnl/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	/a130f268/
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!Make!makefile	included	/included/
!_TAG_ROLE_DESCRIPTION!Make!makefile	optional	/optionally included/
$(NAME)	Makefile	/^$(NAME): gnl libf $(OBJ)$/;"	t
$(NAME)	get_next_line/Makefile	/^$(NAME): $(OBJB)$/;"	t
$(NAME)	libft/Makefile	/^$(NAME): $(OBJS)	$/;"	t
BUFFER_SIZE	get_next_line/get_next_line_bonus.h	/^#  define BUFFER_SIZE /;"	d
CC	Makefile	/^CC = gcc$/;"	m
CC	get_next_line/Makefile	/^CC = gcc$/;"	m
CC	libft/Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -Werror -Wextra -Wall $/;"	m
CFLAGS	get_next_line/Makefile	/^CFLAGS = -Werror -Wall -Wextra #-g -fsanitize=address$/;"	m
CFLAGS	libft/Makefile	/^CFLAGS = -Werror -Wall -Wextra$/;"	m
FT_LIBFT_PRINTF_GNL_H	ft_libft_printf_gnl.h	/^# define FT_LIBFT_PRINTF_GNL_H$/;"	d
GET_NEXT_LINE_BONUS_H	get_next_line/get_next_line_bonus.h	/^# define GET_NEXT_LINE_BONUS_H$/;"	d
LIBFT_H	libft/libft.h	/^# define LIBFT_H$/;"	d
NAME	Makefile	/^NAME = libftprintf.a$/;"	m
NAME	get_next_line/Makefile	/^NAME = get_next_line$/;"	m
NAME	libft/Makefile	/^NAME = libft.a $/;"	m
OBJ	Makefile	/^OBJ = $(SRC:.c=.o) $/;"	m
OBJB	get_next_line/Makefile	/^OBJB = $(SRCB:.c=.o)$/;"	m
OBJS	libft/Makefile	/^OBJS = $(SRC:.c=.o)$/;"	m
OBJSB	libft/Makefile	/^OBJSB = $(SRCB:.c=.o)$/;"	m
SRC	Makefile	/^SRC = optionctrl_supl.c printfer.c printparser.c print_toconv.c optionctrl.c \\$/;"	m
SRC	libft/Makefile	/^SRC = ft_bzero.c ft_isalpha.c ft_isdigit.c ft_isalnum.c ft_isascii.c ft_isprint.c \\$/;"	m
SRCB	get_next_line/Makefile	/^SRCB = get_next_line_utils_bonus.c get_next_line_bonus.c$/;"	m
SRCB	libft/Makefile	/^SRCB = ft_lstnew.c ft_lstadd_front.c ft_lstsize.c ft_lstlast.c ft_lstadd_back.c \\$/;"	m
TSRC	Makefile	/^TSRC = printftester.c$/;"	m
all	Makefile	/^all: $(NAME)$/;"	t
all	get_next_line/Makefile	/^all: $(NAME) $/;"	t
all	libft/Makefile	/^all: $(NAME) bonus$/;"	t
apply_width	optionctrl.c	/^void	apply_width(int size, int width, t_toggler *flg)$/;"	f	typeref:typename:void
appwidspe	optionctrl.c	/^void	appwidspe(int size, int width, t_toggler *flg, t_conv *cvut)$/;"	f	typeref:typename:void
argintprt	print_toconv.c	/^void	argintprt(t_toggler *flg, t_conv *cvut, int toconv)$/;"	f	typeref:typename:void
bonus	Makefile	/^bonus:$/;"	t
bonus	libft/Makefile	/^bonus: $(OBJS) $(OBJSB)$/;"	t
btrim	libft/ft_strtrim.c	/^int	btrim(char const *s1, char const *set)$/;"	f	typeref:typename:int
buf	get_next_line/get_next_line_bonus.h	/^	char	*buf;$/;"	m	struct:sct1	typeref:typename:char *
calc	libft/ft_atoi.c	/^int	calc(int i, const char *nptr)$/;"	f	typeref:typename:int
clean	Makefile	/^clean:$/;"	t
clean	get_next_line/Makefile	/^clean:$/;"	t
clean	libft/Makefile	/^clean:$/;"	t
cleaner	printfer.c	/^void	cleaner(t_conv *cvut)$/;"	f	typeref:typename:void
clear_fing	libft/ft_split.c	/^int	clear_fing(char **ptrptr, int j)$/;"	f	typeref:typename:int
content	libft/libft.h	/^	void			*content;$/;"	m	struct:s_list	typeref:typename:void *
conv_flags	ft_libft_printf_gnl.h	/^	char	*conv_flags;$/;"	m	struct:sct	typeref:typename:char *
copy	libft/ft_strtrim.c	/^char	*copy(char *ptr, char const *s1, int bt, int ft)$/;"	f	typeref:typename:char *
counter	libft/ft_split.c	/^int	counter(char const *s, char c)$/;"	f	typeref:typename:int
create_cvut	printfer_supl.c	/^void	*create_cvut(const char *str, int i, t_conv *cvut)$/;"	f	typeref:typename:void *
cvut_lenpoint	print_toconv.c	/^void	cvut_lenpoint(t_toggler *flg, t_conv *cvut, int toconv)$/;"	f	typeref:typename:void
cvutlenstr	print_toconv_suplll.c	/^void	cvutlenstr(t_conv *cvut, const char *toconv)$/;"	f	typeref:typename:void
dealwithplneg	print_toconv_supllll.c	/^void	dealwithplneg(t_toggler *flg, t_conv *cvut, int toconv)$/;"	f	typeref:typename:void
dealwithplus	print_toconv_supllll.c	/^void	dealwithplus(t_toggler *flg, t_conv *cvut, int toconv)$/;"	f	typeref:typename:void
dealwithpoints	print_toconv_suplll.c	/^void	dealwithpoints(t_toggler *flg, int toconv, t_conv *cvut)$/;"	f	typeref:typename:void
dealwithpospoints	print_toconv_suplll.c	/^void	dealwithpospoints(t_toggler *flg, t_conv *cvut, int toconv)$/;"	f	typeref:typename:void
fclean	Makefile	/^fclean: clean$/;"	t
fclean	get_next_line/Makefile	/^fclean: clean$/;"	t
fclean	libft/Makefile	/^fclean: clean$/;"	t
flag_parser	printparser.c	/^char	*flag_parser(const char *str, int i)$/;"	f	typeref:typename:char *
flglying	optionctrl.c	/^void	*flglying(char *flag, t_toggler *flg)$/;"	f	typeref:typename:void *
freeandreplace	get_next_line/get_next_line_utils_bonus.c	/^char	*freeandreplace(char *oldstr, char *stradd, int ind)$/;"	f	typeref:typename:char *
ft_atoi	libft/ft_atoi.c	/^int	ft_atoi(const char *nptr)$/;"	f	typeref:typename:int
ft_bzero	libft/ft_bzero.c	/^void	ft_bzero(void *s, int n)$/;"	f	typeref:typename:void
ft_calloc	get_next_line/get_next_line_utils_bonus.c	/^void	*ft_calloc(size_t nmemb, size_t size)$/;"	f	typeref:typename:void *
ft_calloc	libft/ft_calloc.c	/^void	*ft_calloc(size_t nmemb, size_t size)$/;"	f	typeref:typename:void *
ft_isalnum	libft/ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f	typeref:typename:int
ft_isalpha	libft/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f	typeref:typename:int
ft_isascii	libft/ft_isascii.c	/^int	ft_isascii(int c)$/;"	f	typeref:typename:int
ft_isdigit	libft/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f	typeref:typename:int
ft_isprint	libft/ft_isprint.c	/^int	ft_isprint(int c)$/;"	f	typeref:typename:int
ft_itoa	libft/ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f	typeref:typename:char *
ft_lstadd_back	libft/ft_lstadd_back.c	/^void	ft_lstadd_back(t_list **lst, t_list *new)$/;"	f	typeref:typename:void
ft_lstadd_front	libft/ft_lstadd_front.c	/^void	ft_lstadd_front(t_list **lst, t_list *new)$/;"	f	typeref:typename:void
ft_lstclear	libft/ft_lstclear.c	/^void	ft_lstclear(t_list **lst, void (*del)(void *))$/;"	f	typeref:typename:void
ft_lstdelone	libft/ft_lstdelone.c	/^void	ft_lstdelone(t_list *lst, void (*del)(void*))$/;"	f	typeref:typename:void
ft_lstiter	libft/ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f)(void *))$/;"	f	typeref:typename:void
ft_lstlast	libft/ft_lstlast.c	/^t_list	*ft_lstlast(t_list *lst)$/;"	f	typeref:typename:t_list *
ft_lstmap	libft/ft_lstmap.c	/^t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))$/;"	f	typeref:typename:t_list *
ft_lstnew	libft/ft_lstnew.c	/^t_list	*ft_lstnew(void *content)$/;"	f	typeref:typename:t_list *
ft_lstsize	libft/ft_lstsize.c	/^int	ft_lstsize(t_list *lst)$/;"	f	typeref:typename:int
ft_memchr	libft/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f	typeref:typename:void *
ft_memcmp	libft/ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f	typeref:typename:int
ft_memcpy	libft/ft_memcpy.c	/^void	*ft_memcpy(void *dst, const void *src, size_t n)$/;"	f	typeref:typename:void *
ft_memmove	libft/ft_memmove.c	/^void	*ft_memmove(void *dst, const void *src, size_t len)$/;"	f	typeref:typename:void *
ft_memset	libft/ft_memset.c	/^void	*ft_memset(void *b, int c, size_t len)$/;"	f	typeref:typename:void *
ft_printf	printfer.c	/^int	ft_printf(const char *str, ...)$/;"	f	typeref:typename:int
ft_putchar_fd	libft/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f	typeref:typename:void
ft_putendl_fd	libft/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f	typeref:typename:void
ft_puthex_fd	optionctrl_supl.c	/^void	ft_puthex_fd(unsigned long ln, int fd, t_conv *cvut)$/;"	f	typeref:typename:void
ft_putnbr_fd	libft/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f	typeref:typename:void
ft_putstr_fd	libft/ft_putstr_fd.c	/^void	ft_putstr_fd(char *s, int fd)$/;"	f	typeref:typename:void
ft_putuns_fd	optionctrl_supl.c	/^void	ft_putuns_fd(unsigned int ln, int fd, t_conv *cvut)$/;"	f	typeref:typename:void
ft_split	libft/ft_split.c	/^char	**ft_split(char const *s, char c)$/;"	f	typeref:typename:char **
ft_strchr	libft/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f	typeref:typename:char *
ft_strdup	libft/ft_strdup.c	/^char	*ft_strdup(const char *s)$/;"	f	typeref:typename:char *
ft_striteri	libft/ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char*))$/;"	f	typeref:typename:void
ft_strjoin	get_next_line/get_next_line_utils_bonus.c	/^char	*ft_strjoin(const char *s1, const char *s2)$/;"	f	typeref:typename:char *
ft_strjoin	libft/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f	typeref:typename:char *
ft_strlcat	libft/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t size)$/;"	f	typeref:typename:size_t
ft_strlcpy	libft/ft_strlcpy.c	/^size_t	ft_strlcpy(char *dst, const char *src, size_t size)$/;"	f	typeref:typename:size_t
ft_strlen	get_next_line/get_next_line_utils_bonus.c	/^size_t	ft_strlen(const char *s)$/;"	f	typeref:typename:size_t
ft_strlen	libft/ft_strlen.c	/^size_t	ft_strlen(const char *s)$/;"	f	typeref:typename:size_t
ft_strmapi	libft/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f	typeref:typename:char *
ft_strncmp	libft/ft_strncmp.c	/^int	ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f	typeref:typename:int
ft_strnstr	libft/ft_strnstr.c	/^char	*ft_strnstr(const char *big, const char *little, size_t len)$/;"	f	typeref:typename:char *
ft_strrchr	libft/ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f	typeref:typename:char *
ft_strtrim	libft/ft_strtrim.c	/^char	*ft_strtrim(char const *s1, char const *set)$/;"	f	typeref:typename:char *
ft_substr	libft/ft_substr.c	/^char	*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f	typeref:typename:char *
ft_tolower	libft/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f	typeref:typename:int
ft_toupper	libft/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f	typeref:typename:int
ftrim	libft/ft_strtrim.c	/^int	ftrim(char const *s1, char const *set)$/;"	f	typeref:typename:int
get_next_line	get_next_line/get_next_line_bonus.c	/^char	*get_next_line(int fd)$/;"	f	typeref:typename:char *
gnl	Makefile	/^gnl:$/;"	t
hash	ft_libft_printf_gnl.h	/^	int	hash;$/;"	m	struct:sctone	typeref:typename:int
hexprintshrinker	print_toconv_supl.c	/^void	hexprintshrinker(t_toggler *flg, unsigned int toconv, t_conv *cvut)$/;"	f	typeref:typename:void
hexshrinker	print_toconv_supll.c	/^void	hexshrinker(unsigned int toconv, t_conv *cvut, t_toggler *flg)$/;"	f	typeref:typename:void
ifbufhasreturn	get_next_line/get_next_line_bonus.c	/^char	*ifbufhasreturn(t_strs *strings, char **statline, int i, int *red)$/;"	f	typeref:typename:char *
ifstatret	get_next_line/get_next_line_bonus.c	/^char	*ifstatret(t_strs *strings, char **statline, int i)$/;"	f	typeref:typename:char *
implfing	libft/ft_split.c	/^void	*implfing(char const *s, char c, char **ptrptr, int *i)$/;"	f	typeref:typename:void *
len	ft_libft_printf_gnl.h	/^	int		len;$/;"	m	struct:sct	typeref:typename:int
lengthhex	print_toconv_supl.c	/^int	lengthhex(unsigned int toconv, t_conv *cvut, t_toggler *flg)$/;"	f	typeref:typename:int
lengthint	print_toconv_supl.c	/^int	lengthint(int toconv, t_conv *cvut, t_toggler *flg)$/;"	f	typeref:typename:int
lengthprehex	print_toconv_supl.c	/^int	lengthprehex(unsigned int toconv, t_conv *cvut, t_toggler *flg)$/;"	f	typeref:typename:int
lengthpreint	print_toconv_supl.c	/^int	lengthpreint(int toconv, t_conv *cvut)$/;"	f	typeref:typename:int
libf	Makefile	/^libf:$/;"	t
line	get_next_line/get_next_line_bonus.h	/^	char	*line;$/;"	m	struct:sct1	typeref:typename:char *
mainwhile	get_next_line/get_next_line_bonus.c	/^char	*mainwhile(int fd, t_strs *strings, char **statline, int *red)$/;"	f	typeref:typename:char *
neg	ft_libft_printf_gnl.h	/^	int	neg;$/;"	m	struct:sctone	typeref:typename:int
next	libft/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list *
no_dupl	printparser.c	/^int	no_dupl(char *retstr, char ch, int e, const char *str)$/;"	f	typeref:typename:int
numbertypes	printfer_supl.c	/^int	numbertypes(t_conv *cvut, long long toconv, int i)$/;"	f	typeref:typename:int
numlen	optionctrl_supl.c	/^int	numlen(unsigned long ln, t_conv *cvut)$/;"	f	typeref:typename:int
numlenneg	optionctrl.c	/^int	numlenneg(long long ln, t_conv *cvut)$/;"	f	typeref:typename:int
parselong	libft/ft_itoa.c	/^int	parselong(long ln, int *neg)$/;"	f	typeref:typename:int
placeva	printfer.c	/^int	placeva(int *ret, t_conv *cvut, int i, va_list perc)$/;"	f	typeref:typename:int
plus	ft_libft_printf_gnl.h	/^	int	plus;$/;"	m	struct:sctone	typeref:typename:int
point	ft_libft_printf_gnl.h	/^	int	point;$/;"	m	struct:sctone	typeref:typename:int
precis	ft_libft_printf_gnl.h	/^	int		precis;$/;"	m	struct:sct	typeref:typename:int
precision_counter	printparser.c	/^int	precision_counter(const char *str, int i)$/;"	f	typeref:typename:int
printargcha	print_toconv_supll.c	/^int	printargcha(int toconv, t_conv *cvut)$/;"	f	typeref:typename:int
printarghex	print_toconv_supll.c	/^int	printarghex(unsigned int toconv, t_conv *cvut)$/;"	f	typeref:typename:int
printargptr	print_toconv_supll.c	/^int	printargptr(unsigned long toconv, t_conv *cvut)$/;"	f	typeref:typename:int
proxylengthcnt	printparser_supl.c	/^int	proxylengthcnt(const char *str, int i)$/;"	f	typeref:typename:int
prx_len	ft_libft_printf_gnl.h	/^	int		prx_len;$/;"	m	struct:sct	typeref:typename:int
ptrtypes	printfer.c	/^int	ptrtypes(t_conv *cvut, void *toconv, int i)$/;"	f	typeref:typename:int
re	Makefile	/^re: fclean$/;"	t
re	get_next_line/Makefile	/^re: fclean$/;"	t
re	libft/Makefile	/^re: fclean all$/;"	t
readforterm	get_next_line/get_next_line_utils_bonus.c	/^int	readforterm(char *buf, int toggle)$/;"	f	typeref:typename:int
s_list	libft/libft.h	/^typedef struct s_list$/;"	s
sct	ft_libft_printf_gnl.h	/^typedef struct sct {$/;"	s
sct1	get_next_line/get_next_line_bonus.h	/^typedef struct sct1 {$/;"	s
sctone	ft_libft_printf_gnl.h	/^typedef struct sctone {$/;"	s
set_flags	optionctrl.c	/^void	*set_flags(t_toggler *flg)$/;"	f	typeref:typename:void *
simple_cvutlen	print_toconv.c	/^void	simple_cvutlen(t_toggler *flg, t_conv *cvut, int toconv)$/;"	f	typeref:typename:void
space	ft_libft_printf_gnl.h	/^	int	space;$/;"	m	struct:sctone	typeref:typename:int
spcplunopoint	print_toconv.c	/^void	spcplunopoint(t_toggler *flg, int toconv, t_conv *cvut)$/;"	f	typeref:typename:void
stat_after_read	get_next_line/get_next_line_bonus.c	/^char	*stat_after_read(char **statline, t_strs *strings, int red, int i)$/;"	f	typeref:typename:char *
strcvutneg	print_toconv_suplll.c	/^void	strcvutneg(t_toggler *flg, t_conv *cvut, const char *toconv)$/;"	f	typeref:typename:void
strshrinker	print_toconv_suplll.c	/^void	strshrinker(t_toggler *flg, t_conv *cvut, const char *toconv)$/;"	f	typeref:typename:void
t_conv	ft_libft_printf_gnl.h	/^}	t_conv;$/;"	t	typeref:struct:sct
t_list	libft/libft.h	/^}	t_list;$/;"	t	typeref:struct:s_list
t_strs	get_next_line/get_next_line_bonus.h	/^}	t_strs;$/;"	t	typeref:struct:sct1
t_toggler	ft_libft_printf_gnl.h	/^}	t_toggler;	$/;"	t	typeref:struct:sctone
testperc	printfer.c	/^int	testperc(t_conv *cvut)$/;"	f	typeref:typename:int
testprintargint	print_toconv_supllll.c	/^int	testprintargint(int toconv, t_conv *cvut)$/;"	f	typeref:typename:int
testprintargstr	print_toconv_supll.c	/^int	testprintargstr(const char *toconv, t_conv *cvut)$/;"	f	typeref:typename:int
testprintarguns	print_toconv.c	/^int	testprintarguns(unsigned int toconv, t_conv *cvut)$/;"	f	typeref:typename:int
trans	libft/ft_itoa.c	/^char	*trans(int i, long buf, int *neg)$/;"	f	typeref:typename:char *
trimatoi	libft/ft_atoi.c	/^int	trimatoi(const char *nptr, int *neg)$/;"	f	typeref:typename:int
type	ft_libft_printf_gnl.h	/^	char	type;$/;"	m	struct:sct	typeref:typename:char
type_reader	printparser.c	/^char	type_reader(const char *str, int i)$/;"	f	typeref:typename:char
wid	ft_libft_printf_gnl.h	/^	int		wid;$/;"	m	struct:sct	typeref:typename:int
width_counter	printparser.c	/^int	width_counter(const char *str, int i)$/;"	f	typeref:typename:int
zero	ft_libft_printf_gnl.h	/^	int	zero;$/;"	m	struct:sctone	typeref:typename:int
